from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime, time

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
TOKEN = "8366890929:AAHbEqoLqyQr1U8BEua7MPf6j1IquvvpGBg"  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
END_OF_DAY = time(12, 0)

schedule_raw = {
    0: ["–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º", "—Ö–∏–º–∏—è/–∞–ª–≥–µ–±—Ä–∞/–∏—Å—Ç–æ—Ä–∏—è", "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–±–∏–æ–ª–æ–≥–∏—è",
        "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–û–ë–ó–†"],
    1: ["—Ö–∏–º–∏—è", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–∏—Å—Ç–æ—Ä–∏—è",
        "–±–∏–æ–ª–æ–≥–∏—è/–∏–Ω—Ñ/–æ–±—â–µ—Å—Ç–≤", "—Ñ–∏–∑–∏–∫–∞", "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
    2: ["–±–∏–æ–ª–æ–≥–∏—è/–∏–Ω—Ñ/–ø—Ä–∞–≤–æ", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–∏—Å—Ç–æ—Ä–∏—è", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–∞–ª–≥–µ–±—Ä–∞", "–≥–µ–æ–º–µ—Ç—Ä–∏—è"],
    3: ["–†–æ—Å—Å–∏—è ‚Äì –º–æ–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã", "—Ö–∏–º–∏—è/–∏–Ω—Ñ/–æ–±—â–µ—Å—Ç–≤", "–∞–ª–≥–µ–±—Ä–∞",
        "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–±–∏–æ–ª–æ–≥–∏—è/–≥–µ–æ–º/–∏—Å—Ç–æ—Ä–∏—è", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞"],
    4: ["–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–±–∏–æ–ª–æ–≥–∏—è/–≥–µ–æ–º/–ø—Ä–∞–≤–æ",
        "–∞–ª–≥–µ–±—Ä–∞", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞"]
}
DAY_NAMES = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞",
             "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
PROFILE = {"–∞–ª–≥–µ–±—Ä–∞", "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"}

# ---------- –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ ----------
def normalize_token(token: str) -> str:
    t = token.strip().lower()
    if t.startswith("–≥–µ–æ–º"):
        return "–≥–µ–æ–º–µ—Ç—Ä–∏—è"
    if t.startswith("–∏–Ω—Ñ"):
        return "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
    return t

def extract_profile_from_combo(lesson: str):
    if "/" not in lesson:
        return lesson
    for raw in lesson.split("/"):
        norm = normalize_token(raw)
        if norm in PROFILE:
            return norm.capitalize()
    return None

def filtered_day(day_idx: int):
    items = []
    for lesson in schedule_raw.get(day_idx, []):
        picked = extract_profile_from_combo(lesson)
        if picked is None:
            continue
        items.append(picked if "/" in lesson else lesson)
    return items

def tomorrow_idx(idx: int):
    if idx >= 4:
        return 0
    return idx + 1

def compute_lists():
    now = datetime.now()
    today_idx = now.weekday()

    base_idx = today_idx
    tmr_idx = tomorrow_idx(today_idx)

    today_lessons = filtered_day(base_idx)
    tmr_lessons = filtered_day(tmr_idx)

    remove = [x for x in today_lessons if x not in tmr_lessons]
    add = [x for x in tmr_lessons if x not in today_lessons]

    return {
        "now": now,
        "today_idx": base_idx,
        "tmr_idx": tmr_idx,
        "today_lessons": today_lessons,
        "tmr_lessons": tmr_lessons,
        "to_remove": remove,
        "to_add": add
    }

# ---------- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = compute_lists()
    now_txt = data["now"].strftime("%d.%m.%Y %H:%M")
    
    msg = f"–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å: {now_txt}\n\n"
    
    # –°–µ–≥–æ–¥–Ω—è
    msg += f"üìÖ –°–µ–≥–æ–¥–Ω—è ({DAY_NAMES[data['today_idx']]}):\n"
    for i, lesson in enumerate(data["today_lessons"], start=1):
        msg += f"{i}. {lesson}\n"
    
    # –ó–∞–≤—Ç—Ä–∞
    msg += f"\nüìÖ –ó–∞–≤—Ç—Ä–∞ ({DAY_NAMES[data['tmr_idx']]}):\n"
    for i, lesson in enumerate(data["tmr_lessons"], start=1):
        msg += f"{i}. {lesson}\n"
    
    # –í—ã–Ω—É—Ç—å
    msg += "\nüì§ –í—ã–Ω—É—Ç—å:\n"
    if data["to_remove"]:
        for i, item in enumerate(data["to_remove"], start=1):
            msg += f"{i}. {item}\n"
    else:
        msg += "–ù–∏—á–µ–≥–æ\n"
    
    # –ü–æ–ª–æ–∂–∏—Ç—å
    msg += "\nüì• –ü–æ–ª–æ–∂–∏—Ç—å:\n"
    if data["to_add"]:
        for i, item in enumerate(data["to_add"], start=1):
            msg += f"{i}. {item}\n"
    else:
        msg += "–ù–∏—á–µ–≥–æ\n"
    
    await update.message.reply_text(msg)


# ---------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----------
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.run_polling()

if __name__ == "__main__":
    main()


